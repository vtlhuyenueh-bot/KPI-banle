import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Dashboard KPI", layout="wide")

st.title("üìä Dashboard KPI - C√° nh√¢n & X·∫øp h·∫°ng")

uploaded_file = st.file_uploader("üìÇ T·∫£i file Excel KPI", type=["xlsx"])

if uploaded_file:
    try:
        # ƒê·ªçc to√†n b·ªô sheet
        xls = pd.ExcelFile(uploaded_file)
        all_sheets = xls.sheet_names

        data_nhanvien = {}

        for sheet in all_sheets:
            df = pd.read_excel(uploaded_file, sheet_name=sheet)

            # Chu·∫©n h√≥a header (b·ªè kho·∫£ng tr·∫Øng, lower-case)
            df.columns = df.columns.str.strip().str.lower()

            required_cols = ["ch·ªâ ti√™u", "tr·ªçng s·ªë", "k·∫ø ho·∫°ch", "th·ª±c hi·ªán"]
            mapping = {
                "ch·ªâ ti√™u": "Ch·ªâ ti√™u",
                "tr·ªçng s·ªë": "Tr·ªçng s·ªë",
                "k·∫ø ho·∫°ch": "K·∫ø ho·∫°ch",
                "th·ª±c hi·ªán": "Th·ª±c hi·ªán"
            }

            if not all(col in df.columns for col in [c.lower() for c in required_cols]):
                st.error(f"‚ùå Sheet '{sheet}' thi·∫øu c·ªôt. Header th·ª±c t·∫ø: {list(df.columns)}")
                st.stop()

            # ƒê·ªïi t√™n c·ªôt v·ªÅ chu·∫©n
            df = df.rename(columns=mapping)

            # T√≠nh to√°n
            df["% Ho√†n th√†nh"] = df["Th·ª±c hi·ªán"] / df["K·∫ø ho·∫°ch"] * 100
            df["ƒêi·ªÉm"] = df["% Ho√†n th√†nh"] * df["Tr·ªçng s·ªë"] / 100

            # Format s·ªë li·ªáu 2 ch·ªØ s·ªë th·∫≠p ph√¢n
            for col in ["Tr·ªçng s·ªë", "K·∫ø ho·∫°ch", "Th·ª±c hi·ªán", "% Ho√†n th√†nh", "ƒêi·ªÉm"]:
                df[col] = df[col].astype(float).round(2)

            data_nhanvien[sheet] = df

        # Ch·ªçn nh√¢n vi√™n
        nhan_vien = st.selectbox("üë§ Ch·ªçn nh√¢n vi√™n", list(data_nhanvien.keys()))

        if nhan_vien:
            df_nv = data_nhanvien[nhan_vien]

            st.subheader(f"üìå KPI chi ti·∫øt - {nhan_vien}")
            st.dataframe(df_nv.style.format({
                "Tr·ªçng s·ªë": "{:.2f}",
                "K·∫ø ho·∫°ch": "{:.2f}",
                "Th·ª±c hi·ªán": "{:.2f}",
                "% Ho√†n th√†nh": "{:.2f}",
                "ƒêi·ªÉm": "{:.2f}"
            }))

            # Bi·ªÉu ƒë·ªì
            fig = px.bar(
                df_nv,
                x="Ch·ªâ ti√™u",
                y=["K·∫ø ho·∫°ch", "Th·ª±c hi·ªán"],
                barmode="group",
                title=f"So s√°nh K·∫ø ho·∫°ch vs Th·ª±c hi·ªán - {nhan_vien}"
            )
            fig.update_layout(yaxis_tickformat=".2f")
            st.plotly_chart(fig, use_container_width=True)

        # X·∫øp h·∫°ng to√†n b·ªô
        st.subheader("üèÜ X·∫øp h·∫°ng c√°n b·ªô")
        ranking = []
        for name, df in data_nhanvien.items():
            tong_diem = df["ƒêi·ªÉm"].sum()
            ranking.append({"Nh√¢n vi√™n": name, "T·ªïng ƒëi·ªÉm": round(tong_diem, 2)})

        df_rank = pd.DataFrame(ranking).sort_values("T·ªïng ƒëi·ªÉm", ascending=False).reset_index(drop=True)
        st.dataframe(df_rank.style.format({"T·ªïng ƒëi·ªÉm": "{:.2f}"}))

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω file: {e}")
