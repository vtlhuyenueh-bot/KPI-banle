import streamlit as st
import pandas as pd
import plotly.express as px
import unicodedata
import traceback

st.set_page_config(page_title="KPI Tracker (auto-header)", layout="wide")
st.title("üìà KPI Tracker ‚Äî t·ª± ƒë·ªông nh·∫≠n header & map c·ªôt")

# ---------- helpers ----------
def normalize_text(s):
    if pd.isna(s):
        return ""
    s = str(s).strip()
    # remove unicode accents
    s = unicodedata.normalize("NFKD", s)
    s = "".join(ch for ch in s if not unicodedata.combining(ch))
    s = s.replace("-", " ").replace("_", " ").lower()
    s = " ".join(s.split())
    return s

# tokens to detect each logical column
TOKENS = {
    "chitieu": ["chi tieu", "chitieu", "ten chi tieu", "ten", "kpi"],
    "kehoach": ["ke hoach", "kehoach", "ke-hoach", "target", "plan"],
    "thuchien": ["thuc hien", "thuchien", "thuc-hien", "actual", "achieved", "result"]
}

def find_best_header_row(df_sheet, max_rows=20):
    scores = []
    for i in range(min(max_rows, len(df_sheet))):
        row = df_sheet.iloc[i].astype(str).fillna("").tolist()
        norm_row = [normalize_text(c) for c in row]
        score = 0
        for token_list in TOKENS.values():
            for tok in token_list:
                if any(tok in cell for cell in norm_row):
                    score += 1
                    break
        scores.append((i, score))
    best = max(scores, key=lambda x: x[1])
    return best[0] if best[1] > 0 else None

def auto_map_columns(cols):
    norm_cols = [normalize_text(c) for c in cols]
    mapping = {}
    for logical, token_list in TOKENS.items():
        found = None
        for i, nc in enumerate(norm_cols):
            for tok in token_list:
                if tok in nc:
                    found = cols[i]
                    break
            if found:
                break
        mapping[logical] = found
    return mapping

def validate_columns(df):
    required = ["Ch·ªâ ti√™u", "K·∫ø ho·∫°ch", "Th·ª±c hi·ªán"]
    missing = [c for c in required if c not in df.columns]
    return missing

# ---------- UI ----------
tabs = st.tabs(["üìÇ Import KPI Data", "üìä Dashboard"])

with tabs[0]:
    st.header("T·∫£i file KPI (Excel)")
    uploaded_file = st.file_uploader("Upload file KPI (.xlsx)", type=["xlsx"])

    if uploaded_file:
        try:
            # ƒë·ªçc t·∫•t c·∫£ sheet kh√¥ng header
            sheets = pd.read_excel(uploaded_file, sheet_name=None, header=None)
            first_sheet = list(sheets.keys())[0]
            raw = sheets[first_sheet]

            # t√¨m header row
            header_row = find_best_header_row(raw, max_rows=30)
            if header_row is not None:
                df = pd.read_excel(uploaded_file, sheet_name=first_sheet, header=header_row)
                st.success(f"‚úÖ ƒê√£ t·ª± ƒë·ªông ph√°t hi·ªán header ·ªü h√†ng {header_row+1}")
            else:
                df = pd.read_excel(uploaded_file, sheet_name=first_sheet, header=0)
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y header ph√π h·ª£p ‚Äî d√πng h√†ng ƒë·∫ßu ti√™n l√†m header.")

            st.subheader("üìë Preview (5 d√≤ng ƒë·∫ßu)")
            st.dataframe(df.head())

            st.subheader("T√™n c·ªôt hi·ªán c√≥ (raw)")
            col_list = df.columns.tolist()
            st.write(col_list)

            # auto map
            auto_map = auto_map_columns(col_list)
            st.subheader("Auto-mapping (g·ª£i √Ω)")
            st.write(auto_map)

            # manual adjust
            st.subheader("Ch·ªçn l·∫°i c·ªôt (n·∫øu c·∫ßn)")
            col_chitieu = st.selectbox("C·ªôt ch·ªâ ti√™u", col_list, index=col_list.index(auto_map["chitieu"]) if auto_map["chitieu"] else 0)
            col_kehoach = st.selectbox("C·ªôt k·∫ø ho·∫°ch", col_list, index=col_list.index(auto_map["kehoach"]) if auto_map["kehoach"] else 0)
            col_thuchien = st.selectbox("C·ªôt th·ª±c hi·ªán", col_list, index=col_list.index(auto_map["thuchien"]) if auto_map["thuchien"] else 0)

            df = df.rename(columns={col_chitieu: "Ch·ªâ ti√™u", col_kehoach: "K·∫ø ho·∫°ch", col_thuchien: "Th·ª±c hi·ªán"})
            st.session_state["kpi_data"] = df
            st.success("üéâ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng, chuy·ªÉn sang tab Dashboard ƒë·ªÉ xem bi·ªÉu ƒë·ªì.")

        except Exception as e:
            st.error("‚ùå L·ªói khi ƒë·ªçc file.")
            st.code(traceback.format_exc())

with tabs[1]:
    st.header("üìä Dashboard KPI")

    if "kpi_data" not in st.session_state:
        st.info("üëÜ H√£y import file Excel ·ªü tab **Import KPI Data** tr∆∞·ªõc.")
    else:
        try:
            df = st.session_state["kpi_data"]

            missing = validate_columns(df)
            if missing:
                st.warning(f"‚ö†Ô∏è File thi·∫øu c·ªôt: {', '.join(missing)}. Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
            else:
                # convert v·ªÅ s·ªë
                for col in ["K·∫ø ho·∫°ch", "Th·ª±c hi·ªán"]:
                    df[col] = pd.to_numeric(df[col], errors="coerce")
                df = df.dropna(subset=["K·∫ø ho·∫°ch", "Th·ª±c hi·ªán"])

                if df.empty:
                    st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi l√†m s·∫°ch.")
                else:
                    # bar chart
                    fig = px.bar(
                        df,
                        x="Ch·ªâ ti√™u",
                        y=["K·∫ø ho·∫°ch", "Th·ª±c hi·ªán"],
                        barmode="group",
                        text_auto=True,
                        title="So s√°nh K·∫ø ho·∫°ch vs Th·ª±c hi·ªán"
                    )
                    st.plotly_chart(fig, use_container_width=True)

                    # % completion
                    df["% Ho√†n th√†nh"] = (df["Th·ª±c hi·ªán"] / df["K·∫ø ho·∫°ch"] * 100).round(1)
                    fig2 = px.line(
                        df,
                        x="Ch·ªâ ti√™u",
                        y="% Ho√†n th√†nh",
                        markers=True,
                        title="% Ho√†n th√†nh KPI"
                    )
                    st.plotly_chart(fig2, use_container_width=True)

                    st.subheader("üìë B·∫£ng d·ªØ li·ªáu chi ti·∫øt")
                    st.dataframe(df, use_container_width=True)

        except Exception as e:
            st.error("‚ùå C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω d·ªØ li·ªáu.")
            st.code(traceback.format_exc())
